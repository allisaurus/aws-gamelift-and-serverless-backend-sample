# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

AWSTemplateFormatVersion: "2010-09-09"
Description: Unity Game Server Example Prerequirements (Cognito resources and Instance Role)

Parameters:
  # The Stack name for Backend Resources to get the API Gateway ARN
  BackendServicesStackName:
    Description: CloudFormation stack containing the Backend Services
    Type: String
    Default: gameservice-backend

Resources:

  # Role for the instances (to access CloudWatch)
  InstanceRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
                - "gamelift.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
  RootInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - 
          Ref: "InstanceRole"


  # COGNITO RESOURCES

  # Creates a federeated Identity pool
  IdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: GameLiftExampleIdentityPool
      AllowUnauthenticatedIdentities: true

  # Create a role for unauthenticated acces to AWS resources. For this example the access is the same (API access) as with authenticated.
  # Only allows users in the previously created Identity Pool
  CognitoUnAuthenticatedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: "CognitoUnauthenticatedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "cognito-sync:*"
                  - "execute-api:Invoke"
                Resource:
                  Fn::ImportValue:
                      !Sub "${BackendServicesStackName}:GameServiceApiArn"

  # Create a role for authenticated acces to AWS resources. The same access as unauthenticated in the example.
  # This role could be used for integration with Facebook, Google or Amazon for example.
  # Only allows users in the previously created Identity Pool
  CognitoAuthenticatedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: "CognitoAuthenticatedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "cognito-sync:*"
                  - "execute-api:Invoke"
                Resource:
                  Fn::ImportValue:
                      !Sub "${BackendServicesStackName}:GameServiceApiArn"
  
  # Assigns the roles to the Identity Pool
  IdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthenticatedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthenticatedRole.Arn

Outputs:
  InstanceRole:
    Description: The role for GameLift fleet instances
    Value: !GetAtt InstanceRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-InstanceRole"
  IdentityPoolID:
    Description: The ID for the identity pool to be used to request identities
    Value: !Ref IdentityPool
    Export:
      Name: !Sub "${AWS::StackName}-IdentityPool"