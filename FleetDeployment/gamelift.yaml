# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

AWSTemplateFormatVersion: "2010-09-09"
Description: Game Server Example GameLift Resources

Parameters: 
  BuildId: 
    Type: String
    Default: v1
    Description: The build version identifier
  PreRequirementsStackName:
    Type: String
    Default: GameLiftExamplePreRequirements
    Description: The name of the stack that defines the role for the gamelift instances
  BackendStackName:
    Type: String
    Default: gameservice-backend
    Description: The name of the stack for the backend
  SecondaryLocation:
    Type: String
    Description: The region identifier for the secondary location for the Fleet

Resources:
  # Matchmaking Ruleset
  MatchmakingRuleSet:
    Type: "AWS::GameLift::MatchmakingRuleSet"
    Properties:
      Name: "GameLiftExampleRuleSet"
      RuleSetBody: !Sub |
        {
            "name": "simplerule",
            "ruleLanguageVersion": "1.0",
            "playerAttributes": [{
                "name": "skill",
                "type": "number",
                "default": 10
            }],
            "teams": [{
                "name": "oneteam",
                "maxPlayers": 10,
                "minPlayers": 4
            }],
            "rules": [{
                "name": "FairSkill",
                "description": "The average skill of players is within 10 points from the average skill of all players in the match",
                "type": "distance",
                // get skill value for each player
                "measurements": [ "teams[oneteam].players.attributes[skill]" ],
                // get skill values for all players and average to produce an overall average
                "referenceValue": "avg(teams[oneteam].players.attributes[skill])",
                "maxDistance": 10
            },{
              "name": "FastConnection",
              "description": "Prefer matches with fast player connections first",
              "type": "latency",
              "maxLatency": 50
            }],
            "expansions": [{
                "target": "teams[oneteam].minPlayers",
                "steps": [{
                    "waitTimeSeconds": 5,
                    "value": 2
                }]},{
                "target": "rules[FastConnection].maxLatency",
                "steps": [{
                    "waitTimeSeconds": 10,
                    "value": 200
                }]
            }]
        }

  # Queue to pass sessions to the fleet through the alias
  Queue:
    Type: "AWS::GameLift::GameSessionQueue"
    Properties:
      Name: "MyGameSessionQueue"
      TimeoutInSeconds: 50
      Destinations:
        # DestinationArn can be either an Alias arn or Fleet arn that you own
        - DestinationArn:
            !Join
              - ''
              - - 'arn:aws:gamelift:'
                - !Ref "AWS::Region"
                - '::alias/'
                - !Ref Alias
      # We try for less than 50ms latency for 5 seconds and then accept anything
      # FlexMatch already tries to group players with less than 50ms latency to a Region as well
      PlayerLatencyPolicies:
        - MaximumIndividualPlayerLatencyMilliseconds: 60
          PolicyDurationSeconds: 5
        - MaximumIndividualPlayerLatencyMilliseconds: 1000

  # Configuration that uses the rule set
  MatchMakingConfiguration:
    Type: "AWS::GameLift::MatchmakingConfiguration"
    Properties:
      Name: "ExampleGameConfiguration"
      AcceptanceRequired: false
      AdditionalPlayerCount: 0
      RequestTimeoutSeconds: 25
      BackfillMode: "MANUAL"
      Description: "A basic matchmaking configuration"
      # Just some example properties, not used in our game
      GameProperties:
        - Key: "gamemode"
          Value: "classic"
      GameSessionQueueArns:
        - !GetAtt Queue.Arn
      RuleSetName: !Ref MatchmakingRuleSet
      NotificationTarget:
        Fn::ImportValue:
          !Sub "${BackendStackName}-MatchmakingEventsSNSTopic"

  # The Fleet
  Fleet: 
    Type: AWS::GameLift::Fleet
    Properties: 
      Name: "ExampleLinuxFleet"
      Description: "An Example Linux Fleet"
      # We run a secondary location for this Fleet and do latency-based matchmaking between them
      Locations:
        - Location: !Ref SecondaryLocation 
        - Location: !Ref "AWS::Region"
      BuildId: 
        Ref: "BuildId"
      # Run 2 game servers in different ports with different log files
      RuntimeConfiguration:
        GameSessionActivationTimeoutSeconds: 300
        MaxConcurrentGameSessionActivations: 1
        ServerProcesses:
          - ConcurrentExecutions: 1
            LaunchPath: /local/game/GameLiftExampleServer.x86_64
            Parameters: -logFile /local/game/logs/myserver1935.log -port 1935
          - ConcurrentExecutions: 1
            LaunchPath: /local/game/GameLiftExampleServer.x86_64
            Parameters: -logFile /local/game/logs/myserver7777.log -port 7777
      EC2InstanceType: "c5.large"
      # We want exactly one instance (no scaling allowed in the example)
      DesiredEC2Instances: "1"
      #Create TLS certificate for optional encrypted client-server traffic
      CertificateConfiguration:
        CertificateType: GENERATED
      InstanceRoleARN:
        Fn::ImportValue:
          !Sub "${PreRequirementsStackName}-InstanceRole"
      #Allow TCP inbound access to our game servers
      EC2InboundPermissions: 
        - 
          FromPort: "1935"
          ToPort: "1935"
          IpRange: "0.0.0.0/0"
          Protocol: "TCP"
        - 
          FromPort: "7777"
          ToPort: "7777"
          IpRange: "0.0.0.0/0"
          Protocol: "TCP"

  # Alias that references the fleet
  # This is not required as we're registering to a Queue but just here for example
  # If you target Fleets directly, then Aliases are useful for replacing Fleets.
  Alias: 
    Type: AWS::GameLift::Alias
    Properties: 
      Name: "ExampleGameServerAlias"
      Description: "An alias routing traffic to the fleet"
      RoutingStrategy: 
        Type: "SIMPLE"
        FleetId: !Ref Fleet
 